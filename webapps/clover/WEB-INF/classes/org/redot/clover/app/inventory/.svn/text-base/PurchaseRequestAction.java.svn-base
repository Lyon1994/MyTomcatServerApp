package org.redot.clover.app.inventory;

import org.redot.clover.app.system.SystemAction;
import org.redot.clover.core.CloverManager;
import org.redot.clover.core.ext.BaseAction;
import org.redot.clover.core.ext.Params;
import org.redot.library.db.IQuery;
import org.redot.library.db.ITable;
import org.redot.library.lang.DateUtils;
import org.redot.library.lang.NumberUtils;
import org.redot.library.lang.StringUtils;
import org.restlet.data.Form;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 12-8-29
 * Time: 下午4:22
 * To change this template use File | Settings | File Templates.
 */
public class PurchaseRequestAction extends BaseAction{

    public List<Map> list(Params params){
        String PR_NO = StringUtils.toString(params.val("PR_NO"));
        String PR_MAKER = StringUtils.toString(params.val("PR_MAKER"));
        String PR_MAKER_NAME = StringUtils.toString(params.val("PR_MAKER_NAME"));
        String PR_STATUS = StringUtils.toString(params.val("PR_STATUS"));
        String DATE_S = StringUtils.toString(params.val("DATE_S"));
        String DATE_E = StringUtils.toString(params.val("DATE_E"));
        if (DATE_S.length() == 0) {
            DATE_S = DateUtils.getNowDate();
        }
        if (DATE_E.length() == 0) {
            DATE_E = DateUtils.getNowDate();
        }
        if(DATE_S.compareTo(DATE_E) > 0){
            DATE_S = DateUtils.getNowDate();
            DATE_E = DateUtils.getNowDate();
        }
        String COND = " SUBSTRING(A.PR_DT, 1, 10)  >= '" + DATE_S.substring(0, 10)+ "' AND SUBSTRING(A.PR_DT, 1, 10) <= '" + DATE_E.substring(0, 10) + "'";
        if(PR_NO.length() > 0){
            COND += " AND A.PR_NO LIKE '" + PR_NO + "%'";
        }
        if(PR_MAKER_NAME.length() > 0){
            COND += " AND B.ACCOUNT_NAME LIKE '" + PR_MAKER_NAME + "%'";
        }
        if(PR_MAKER.length() > 0){
            COND += " AND A.PR_MAKER = " + PR_MAKER ;
        }
        if(PR_STATUS.length() > 0){
            COND += " AND A.PR_STATUS = " + PR_STATUS;
        }
        String sql = "SELECT A.*,B.ACCOUNT_NAME AS PR_MAKER_NAME ,C.ACCOUNT_NAME AS PR_USER_CHECK,D.ACCOUNT_NAME AS PR_USER_CANCEL" +
                " FROM X_PR  A " +
                " LEFT JOIN X_ACCOUNT B ON A.PR_MAKER = B.ACCOUNT_ID " +
                " LEFT JOIN X_ACCOUNT C ON A.PR_USER_CHECK = C.ACCOUNT_ID" +
                " LEFT JOIN X_ACCOUNT D ON A.PR_USER_CANCEL = D.ACCOUNT_ID" +
                " WHERE "+COND+" AND PR_STATUS <> 2 ORDER BY A.PR_DT";
        System.out.println(sql);
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();
        query.free();
        return list;
    }

    public int set(Form form){
        Map data = form.getValuesMap();
        String PR_ID = StringUtils.toString(data.get("PR_ID"));
        String PR_DT_IEQ = StringUtils.toString(data.get("PR_DT_IEQ"));
        String PR_MEMO = StringUtils.toString(data.get("PR_MEMO"));
        String ACCOUNT_ID = StringUtils.toString(getClient().getCookies().get("ACCOUNT_ID"));

        ITable T = getTable("X_PR").clearData();
        ITable TX = getTable("X_PR_ITEM").clearData();
        int result = 0;

        if(PR_ID.length() == 0){
            PR_ID = String.valueOf(T.getMaxID("PR_ID"));
            data.put("PR_ID", PR_ID);
            data.put("PR_DT", DateUtils.getNow());
            data.put("PR_MAKER", ACCOUNT_ID);
            data.put("PR_NO", SystemAction.makePRSN());
            data.put("PR_STATUS", 0);
            data.put("PR_DT_IEQ", PR_DT_IEQ);
            data.put("PR_MEMO", PR_MEMO);
            result = T.data(data).create();
        }
        else{
            String sql = "SELECT PR_STATUS FROM X_PR WHERE PR_ID= " + PR_ID;
            System.out.println(sql);
            IQuery query = getQuery();
            int status = NumberUtils.toInt(query.doQuery(sql).getValue());
            if(status == 1) {
                return CloverManager.CODE_FAILED;
            }
            TX.where(TX.column("PR_ID").eq(PR_ID)).delete();
            result = T.data(data).where(T.column("PR_ID").eq(PR_ID)).update();
        }

        if(result < 0){
            return CloverManager.CODE_FAILED;
        }

        String[] PR_ITEM_ID_ARR = StringUtils.split(StringUtils.toString(data.get("PR_ITEM_ID")) , ",");
        String[] PR_S_ID_ARR = StringUtils.split(StringUtils.toString(data.get("PR_S_ID")) , ",");
        String[] PR_ITEM_NUM_ARR = StringUtils.split(StringUtils.toString(data.get("PR_ITEM_NUM")),",");
        String[] PR_ITEM_NUM_GIVE_ARR = StringUtils.split(StringUtils.toString(data.get("PR_ITEM_NUM_GIVE")) , ",");
        String[] PR_ITEM_UNIT_ID_ARR = StringUtils.split(StringUtils.toString(data.get("PR_ITEM_UNIT_ID")) , ",");
        String[] PR_ITEM_PRICE_ARR = StringUtils.split(StringUtils.toString(data.get("PR_ITEM_PRICE")) , ",");
        String[] PR_ITEM_AMOUNT_ARR = StringUtils.split(StringUtils.toString(data.get("PR_ITEM_AMOUNT")) , ",");

        if(PR_ITEM_ID_ARR.length != PR_S_ID_ARR.length && PR_S_ID_ARR.length != PR_ITEM_NUM_ARR.length && PR_ITEM_NUM_ARR.length != PR_ITEM_NUM_GIVE_ARR.length
                && PR_ITEM_NUM_GIVE_ARR.length != PR_ITEM_UNIT_ID_ARR.length && PR_ITEM_PRICE_ARR.length!= PR_ITEM_AMOUNT_ARR.length){
            return CloverManager.CODE_FAILED;
        }

        for(int i = 0; i < PR_ITEM_NUM_ARR.length; i++){
            Map m = new Hashtable();
            m.put("PR_ID", PR_ID);
            m.put("PR_ITEM_ID", PR_ITEM_ID_ARR[i]);
            m.put("PR_S_ID", PR_S_ID_ARR[i]);
            m.put("PR_ITEM_NUM", PR_ITEM_NUM_ARR[i]);
            m.put("PR_ITEM_NUM_GIVE", PR_ITEM_NUM_GIVE_ARR[i]);
            m.put("PR_ITEM_UNIT_ID", PR_ITEM_UNIT_ID_ARR[i]);
            m.put("PR_ITEM_PRICE", PR_ITEM_PRICE_ARR[i]);
            m.put("PR_ITEM_AMOUNT", PR_ITEM_AMOUNT_ARR[i]);
            m.put("PR_ITEM_INDEX", i+1);
            TX.data(m).create();
            TX.clearData();
        }
        return CloverManager.CODE_SUCCESS;
    }

    public int delete(Form form) {
        Map data = form.getValuesMap();
        String PR_ID = StringUtils.toString(data.get("PR_ID"));
        if(PR_ID.length() == 0){
            return CloverManager.CODE_FAILED;
        }
        IQuery query = getQuery();

        String sql = "UPDATE X_PR SET PR_STATUS = 2 WHERE PR_ID = " + PR_ID;
        int result = query.doExec(sql);
        if(result < 0){
            query.free();
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }

    public List<Map> get(String PR_ID){
        IQuery query = getQuery();
        String sql = "SELECT A.* ,B.UNIT_NAME AS PR_ITEM_UNIT_NAME, C.S_NAME AS PR_S_NAME, D.ITEM_NAME AS PR_ITEM_NAME FROM X_PR_ITEM A " +
                "LEFT JOIN X_UNIT B ON A.PR_ITEM_UNIT_ID = B.UNIT_ID " +
                "LEFT JOIN X_S C ON A.PR_S_ID = C.S_ID " +
                "LEFT JOIN X_ITEM D ON A.PR_ITEM_ID =D.ITEM_ID  WHERE PR_ID = " + PR_ID;
        System.out.println(sql);
        List<Map> list = query.doQuery(sql).tables();
        query.free();
        return list;
    }

    public int check(Form form){
        if(!isLogin()){
            return CloverManager.CODE_FAILED;
        }
        String ACCOUNT_ID = StringUtils.toString(getClient().getCookies().get("ACCOUNT_ID"));
        Map data = form.getValuesMap();
        String PR_ID = StringUtils.toString(data.get("PR_ID"));
        ITable T = getTable("X_PR").clearData();
        int result = 0;
        data.put("PR_DT_CHECK", DateUtils.getNow());
        data.put("PR_USER_CHECK", ACCOUNT_ID);
        data.put("PR_STATUS", 1);
        result = T.data(data).where(T.column("PR_ID").eq(PR_ID)).update();
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return makePurchase(PR_ID);
    }
    
    public int makePurchase(String PR_ID){
        IQuery query = getQuery();
        String sql = "SELECT PR_ID,PR_S_ID,SUM(PR_ITEM_AMOUNT) AS AMOUNT FROM X_PR_ITEM WHERE PR_ID = " + PR_ID +" GROUP BY PR_S_ID";
        System.out.println(sql);
        List<Map> lists = query.doQuery(sql).tables();
        ITable T = getTable("X_PO").clearData();
        Map map = new HashMap();
        int result = 0;
        for(Map list:lists){
            String PO_ID = String.valueOf(T.getMaxID("PO_ID"));
            map.put("PO_ID", PO_ID);
            map.put("PR_ID", StringUtils.toString(list.get("PR_ID")));
            map.put("PO_NO", SystemAction.makePRSN());
            map.put("PO_DT", DateUtils.getNow());
            map.put("PO_S_ID", StringUtils.toString(list.get("PR_S_ID")));
            map.put("PO_AMOUNT", StringUtils.toString(list.get("AMOUNT")));
            map.put("PO_STATUS", 0);
            result = T.data(map).create();
        }
        if(result < 0){
            return  CloverManager.CODE_FAILED;
        }
        sql = "SELECT A.*,B.PO_ID FROM X_PR_ITEM A LEFT JOIN X_PO B ON A.PR_S_ID = B.PO_S_ID WHERE A.PR_ID = " + PR_ID +" AND A.PR_ID = B.PR_ID";
        System.out.println(sql);
        lists = query.doQuery(sql).tables();
        T = getTable("X_PO_ITEM").clearData();
        int i = 0;
        for(Map list:lists){
            i++;
            map.put("PO_ID", StringUtils.toString(list.get("PO_ID")));
            map.put("PO_ITEM_INDEX", i);
            map.put("PO_ITEM_ID", StringUtils.toString(list.get("PR_ITEM_ID")));
            map.put("PO_S_ID", StringUtils.toString(list.get("PR_S_ID")));
            map.put("PO_ITEM_NUM", StringUtils.toString(list.get("PR_ITEM_NUM")));
            map.put("PO_ITEM_NUM_GIVE", StringUtils.toString(list.get("PR_ITEM_NUM_GIVE")));
            map.put("PO_ITEM_UNIT_ID", StringUtils.toString(list.get("PR_ITEM_UNIT_ID")));
            map.put("PO_ITEM_PRICE", StringUtils.toString(list.get("PR_ITEM_PRICE")));
            map.put("PO_ITEM_AMOUNT", StringUtils.toString(list.get("PR_ITEM_AMOUNT")));
            result = T.data(map).create();
        }
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }
    
    public int reject(Form form){
         if(!isLogin()){
            return CloverManager.CODE_FAILED;
        }
        String ACCOUNT_ID = StringUtils.toString(getClient().getCookies().get("ACCOUNT_ID"));
        Map data = form.getValuesMap();
        String PR_ID = StringUtils.toString(data.get("PR_ID"));
        ITable T = getTable("X_PR").clearData();
        int  result = 0;
        data.put("PR_DT_CHECK", DateUtils.getNow());
        data.put("PR_USER_CHECK", ACCOUNT_ID);
        data.put("PR_STATUS", 3);
        result = T.data(data).where(T.column("PR_ID").eq(PR_ID)).update();
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }
}
