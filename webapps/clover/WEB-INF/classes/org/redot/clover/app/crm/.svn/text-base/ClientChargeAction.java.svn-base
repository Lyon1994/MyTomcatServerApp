package org.redot.clover.app.crm;

import org.redot.clover.core.CloverManager;
import org.redot.clover.core.ext.BaseAction;
import org.redot.clover.core.ext.Params;
import org.redot.clover.print.PrintJob;
import org.redot.clover.print.PrintManager;
import org.redot.library.db.IQuery;
import org.redot.library.db.ITable;
import org.redot.library.lang.DateUtils;
import org.redot.library.lang.NumberUtils;
import org.redot.library.lang.StringUtils;
import org.restlet.data.Form;

import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 12-8-15
 * Time: 上午10:45
 * To change this template use File | Settings | File Templates.
 */
public class ClientChargeAction extends BaseAction{

    public Map balance (Form form){
        Map map = new HashMap();
        map.put("BALANCE", "");
        Map data = form.getValuesMap();
        String CLIENT_ID = StringUtils.toString(data.get("CLIENT_ID"));
        String CLIENT_CARD_NO = StringUtils.toString(data.get("CLIENT_CARD_NO"));

        IQuery query = getQuery();
        if(CLIENT_ID.length() == 0){
            if(CLIENT_CARD_NO.length() != 0){
                String sql = "SELECT CLIENT_ID FROM X_CLIENT_CARD WHERE CLIENT_CARD_NO =" + CLIENT_CARD_NO;
                Map m = query.doQuery(sql).table();
                CLIENT_ID = m.get("CLIENT_ID").toString();
            }
        }
    //    System.out.println("编号："+CLIENT_ID +"卡号："+CLIENT_CARD_NO);

        float S_AMOUNT_CARD = NumberUtils.toFloat(query.doQuery("SELECT FUN_AMOUNT_CARD(1) AS S_AMOUNT_CARD").getValue());
        float S_AMOUNT_GIVE = NumberUtils.toFloat(query.doQuery("FUN_AMOUNT_GIVE(1) AS S_AMOUNT_GIVE").getValue());
        float S_AMOUNT_USE =  NumberUtils.toFloat(query.doQuery("FUN_AMOUNT_USE(1) AS S_AMOUNT_USE").getValue());
        float balance = (S_AMOUNT_CARD+S_AMOUNT_GIVE )-S_AMOUNT_USE;
    //    System.out.println("充值金额为："+S_AMOUNT_CARD+"赠送金额为："+S_AMOUNT_GIVE+"消费金额为："+S_AMOUNT_USE+"余额为："+balance);

        map.put("BALANCE",balance);
        return map;
    }

    public List<Map> list(Params params){
        List<Map> data = new ArrayList<Map>();
        String CLIENT_ID = StringUtils.toString(params.val("CLIENT_ID"));
        String CLIENT_CARD_NO = StringUtils.toString(params.val("CLIENT_CARD_NO"));
        String CLIENT_CHARGE_MAKER = StringUtils.toString(params.val("CLIENT_CHARGE_MAKER"));
        String CLIENT_CHARGE_AMOUNT = StringUtils.toString(params.val("CLIENT_CHARGE_AMOUNT"));
        String CLIENT_CHARGE_GIVE_AMOUNT = StringUtils.toString(params.val("CLIENT_CHARGE_GIVE_AMOUNT"));

        String DINE_DATE_S = StringUtils.toString(params.val("DINE_DATE_S"));
        String DINE_DATE_E = StringUtils.toString(params.val("DINE_DATE_E"));
        if (DINE_DATE_S.length() == 0) {
            DINE_DATE_S = DateUtils.getNowDate();
        }
        if (DINE_DATE_E.length() == 0) {
            DINE_DATE_E = DateUtils.getNowDate();
        }
        if(DINE_DATE_S.compareTo(DINE_DATE_E) > 0){
            DINE_DATE_S = DateUtils.getNowDate();
            DINE_DATE_E = DateUtils.getNowDate();
        }

        IQuery query = getQuery();
        if(CLIENT_ID.length() == 0){
            if(CLIENT_CARD_NO.length() != 0){
                String sql = "SELECT CLIENT_ID FROM X_CLIENT_CARD WHERE CLIENT_CARD_NO =" + CLIENT_CARD_NO;
                Map m = query.doQuery(sql).table();
                CLIENT_ID = m.get("CLIENT_ID").toString();
            }
        }

        String COND = "";
        if(CLIENT_ID.length() > 0){
            COND += " AND A.CLIENT_ID = "+ CLIENT_ID;
        }
        if(CLIENT_CARD_NO.length() > 0){
            COND += " AND D.CLIENT_CARD_NO = "+CLIENT_CARD_NO;
        }
        if(CLIENT_CHARGE_MAKER.length() > 0){
            COND += " AND A.CLIENT_CHARGE_MAKER = " + CLIENT_CHARGE_MAKER;
        }
        if(CLIENT_CHARGE_AMOUNT.length() > 0){
            COND += " AND A.CLIENT_CHARGE_AMOUNT = " + CLIENT_CHARGE_AMOUNT;
        }
        if(CLIENT_CHARGE_GIVE_AMOUNT.length()>0){
            COND += " AND A.CLIENT_CHARGE_GIVE_AMOUNT =" +CLIENT_CHARGE_GIVE_AMOUNT;
        }

        String DT_CC = " SUBSTRING(A.CLIENT_CHARGE_DT, 1, 10)  >= '" + DINE_DATE_S.substring(0, 10) + "' AND SUBSTRING(A.CLIENT_CHARGE_DT, 1, 10) <= '" + DINE_DATE_E.substring(0, 10) + "'";

        String sql = "SELECT A.*, B.CLIENT_NAME,C.ACCOUNT_NAME AS CLIENT_CHARGE_MAKER_NAME,D.CLIENT_CARD_NO FROM X_CLIENT_CHARGE A " +
                "INNER JOIN X_CLIENT B ON A.CLIENT_ID = B.CLIENT_ID " +
                "LEFT JOIN X_ACCOUNT C ON A.CLIENT_CHARGE_MAKER=C.ACCOUNT_ID " +
                "LEFT JOIN X_CLIENT_CARD D ON A.CLIENT_ID=D.CLIENT_ID WHERE" + DT_CC + COND + " ORDER BY A.CLIENT_CHARGE_DT";
        System.out.println(sql);
        List<Map> list = query.doQuery(sql).tables();
        data.addAll(list);
        query.free();
        return data;
    }

    public List<Map> get(Params params){
        String CLIENT_ID = StringUtils.toString(params.val("CLIENT_ID"));
        if(CLIENT_ID.length() == 0){
            return null;
        }

        String sql = "SELECT A.CLIENT_NAME,B.CLIENT_CARD_NO,D.BILL_DT_FINISH,D.BILL_AMOUNT_ALL,FUN_AMOUNT_CARD("+ CLIENT_ID +") AS S_AMOUNT_CARD," +
                "FUN_AMOUNT_USE("+ CLIENT_ID +") AS S_AMOUNT_USE,FUN_AMOUNT_BALANCE("+ CLIENT_ID +")  AS S_AMOUNT_BALANCE FROM X_CLIENT A " +
                "LEFT JOIN X_CLIENT_CARD B ON A.CLIENT_ID = B.CLIENT_ID " +
                "LEFT JOIN X_BILL D ON D.BILL_ID = (SELECT MAX(BILL_ID) FROM X_BILL_PAY WHERE BILL_PAY_CLIENT_ID = A.CLIENT_ID) " +
                "WHERE A.CLIENT_ID = " + CLIENT_ID;
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();
        for (Map m:list){
           sql = "SELECT F.P_NAME,SUM(E.O_P_NUM) AS P_NUM FROM X_CLIENT A " +
                   "LEFT JOIN X_BILL_PAY B ON A.CLIENT_ID = B.BILL_PAY_CLIENT_ID " +
                   "LEFT JOIN X_BILL C ON B.BILL_ID = C.BILL_ID " +
                   "LEFT JOIN X_O D ON C.BILL_ID = D.O_BILL_ID " +
                   "LEFT JOIN X_O_P E ON D.O_ID = E.O_ID " +
                   "LEFT JOIN X_P F ON E.O_P_ID = F.P_ID " +
                   "WHERE C.BILL_STATUS = 10 AND A.CLIENT_ID = " + CLIENT_ID + " GROUP BY F.P_ID ORDER BY P_NUM DESC";
           List<Map> data =  query.doQuery(sql).tables();
           String p_names = "";
           String p_nums = "";
           for (Map mx:data){
               if (p_names.length() > 0){
                   p_names += ",";
                   p_nums += ",";
               }
               p_names += StringUtils.toString(mx.get("P_NAME"));
               p_nums += StringUtils.toString(mx.get("P_NUM"));
           }
           m.put("P_NAME", p_names);
           m.put("P_NUM", p_nums);
        }
        System.out.println(sql);
        query.free();
        return list;
    }


    public int set(Form form){
        Map data = form.getValuesMap();
        String CLIENT_ID = StringUtils.toString(data.get("CLIENT_ID"));
        String CLIENT_CARD_NO = StringUtils.toString(data.get("CLIENT_CARD_NO"));
        String ACCOUNT_ID = StringUtils.toString(getClient().getCookies().get("ACCOUNT_ID"));
        String CLIENT_CHARGE_AMOUNT = StringUtils.toString(data.get("CLIENT_CHARGE_AMOUNT"));
        String CLIENT_CHARGE_GIVE_AMOUNT = StringUtils.toString(data.get("CLIENT_CHARGE_GIVE_AMOUNT"));

        if(CLIENT_ID.length() == 0){
            if(CLIENT_CARD_NO.length() != 0){
                String sql = "SELECT CLIENT_ID FROM X_CLIENT_CARD WHERE CLIENT_CARD_NO = " + CLIENT_CARD_NO;
                IQuery query = getQuery();
                Map m = query.doQuery(sql).table();
                CLIENT_ID = m.get("CLIENT_ID").toString();
            }
            else{
                return CloverManager.CODE_FAILED;
            }
        }
        if( ACCOUNT_ID.length() == 0){
            return CloverManager.CODE_FAILED;
        }

        ITable T = getTable("X_CLIENT_CHARGE").clearData();
        int result = 0;
        String CLIENT_CHARGE_ID = String.valueOf(T.getMaxID("CLIENT_CHARGE_ID"));
        data.put("CLIENT_CHARGE_ID", CLIENT_CHARGE_ID);
        data.put("CLIENT_ID", CLIENT_ID);
        data.put("CLIENT_CHARGE_DT", DateUtils.getNow());
        data.put("CLIENT_CHARGE_AMOUNT", CLIENT_CHARGE_AMOUNT);
        data.put("CLIENT_CHARGE_GIVE_AMOUNT", CLIENT_CHARGE_GIVE_AMOUNT);
        data.put("CLIENT_CHARGE_MAKER", ACCOUNT_ID);
        data.put("CLIENT_CHARGE_STATUS", 1);
        result = T.data(data).create();

        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        Map params = new Hashtable();
        params.put("CLIENT_CHARGE_ID", CLIENT_CHARGE_ID);
        PrintManager.getInstance().addJob(PrintJob.COMMAND_CLIENT_CHARGE,params);
        return CloverManager.CODE_SUCCESS;

    }

    public int back(Form form){
        if(!isLogin()){
            return CloverManager.CODE_FAILED;
        }
        String ACCOUNT_ID = StringUtils.toString(getClient().getCookies().get("ACCOUNT_ID"));
        Map data = form.getValuesMap();
        String CLIENT_CHARGE_ID = StringUtils.toString(data.get("CLIENT_CHARGE_ID"));

        ITable T = getTable("X_CLIENT_CHARGE").clearData();
        int result = 0;
        data.put("CLIENT_CHARGE_DT", DateUtils.getNow());
        data.put("CLIENT_CHARGE_MAKER", ACCOUNT_ID);
        data.put("CLIENT_CHARGE_STATUS", 2);
        result = T.data(data).where(T.column("CLIENT_CHARGE_ID").eq(CLIENT_CHARGE_ID)).update();
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }
}
