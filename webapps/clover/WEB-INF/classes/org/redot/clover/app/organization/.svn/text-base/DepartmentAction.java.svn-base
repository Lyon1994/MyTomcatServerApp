package org.redot.clover.app.organization;

import org.redot.clover.core.CloverManager;
import org.redot.clover.core.ext.BaseAction;
import org.redot.library.db.IQuery;
import org.redot.library.db.ITable;
import org.redot.library.lang.StringUtils;
import org.restlet.data.Form;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 11-4-18
 * Time: 下午8:46
 * To change this template use File | Settings | File Templates.
 */
public class DepartmentAction extends BaseAction{

    public List<Map> tree(String DEPT_ID){
        DEPT_ID = DEPT_ID == null || DEPT_ID.equals("") ? "0" : DEPT_ID;
        String sql = "SELECT * FROM X_DEPT WHERE DEPT_STATUS <> 2 AND DEPT_PARENT="+DEPT_ID+" ORDER BY DEPT_SORT";
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();
        List<Map> data = new ArrayList<Map>();
        for(int i=0;i<list.size();i++){
            Map m = list.get(i);
            Map d = new Hashtable();
            String DEPT_ID_ = StringUtils.toString(m.get("DEPT_ID"));
            d.put("ID", DEPT_ID_);
            d.put("NAME", StringUtils.toString(m.get("DEPT_NAME")));
            d.put("EXT", m);
            sql = "SELECT * FROM X_DEPT WHERE DEPT_STATUS <> 2 AND DEPT_PARENT="+DEPT_ID_;
            if(query.rowCount(sql) > 0){
                d.put("ITEM", tree(DEPT_ID_));
            }
            else{
                d.put("ITEM", new ArrayList<Map>());
            }
            data.add(d);
        }
        query.free();
        return data;
    }

    public List<Map> list(){

        String sql = "SELECT A.*, B.DEPT_STATUS_NAME FROM X_DEPT A LEFT JOIN X_DEPT_STATUS B ON A.DEPT_STATUS = B.DEPT_STATUS WHERE A.DEPT_STATUS <> 2 ORDER BY A.DEPT_SORT, A.DEPT_ID";
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();

        query.free();
        return list;
    }

    public Map get(String DEPT_ID){
        if(DEPT_ID == null || DEPT_ID.equals("")){
            return null;
        }
        String sql = "SELECT A.*,B.DEPT_NAME AS DEPT_PARENT_NAME FROM X_DEPT A LEFT JOIN X_DEPT B ON A.DEPT_PARENT=B.DEPT_ID WHERE A.DEPT_ID="+DEPT_ID;
        IQuery query = getQuery();
        Map m = query.doQuery(sql).table();
        query.free();
        return m;
    }

    public int set(Form form){
        Map data = form.getValuesMap();
        String DEPT_ID = StringUtils.toString(data.get("DEPT_ID"));
        String DEPT_PARENT = StringUtils.toString(data.get("DEPT_PARENT"));
        if(DEPT_PARENT.length() == 0){
            data.put("DEPT_PARENT", "0");
        }
        ITable t = getTable("X_DEPT").clearData();
        int result;
        if(DEPT_ID.length() == 0){
            DEPT_ID = String.valueOf(t.getMaxID("DEPT_ID"));
            data.put("DEPT_ID", DEPT_ID);
            result = t.data(data).create();
        }
        else{
            result = t.data(data).where(t.column("DEPT_ID").eq(DEPT_ID)).update();
        }
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }

    public int delete(Form form) {
        Map data = form.getValuesMap();
        String DEPT_ID = StringUtils.toString(data.get("DEPT_ID"));
        if(DEPT_ID.length() == 0){
            return CloverManager.CODE_FAILED;
        }
        String sql = "SELECT * FROM X_DEPT WHERE DEPT_PARENT = " + DEPT_ID;
        IQuery query = getQuery();
        if(query.rowCount(sql) > 0){
            query.free();
            return CloverManager.CODE_FAILED;
        }
        sql = "UPDATE X_DEPT SET DEPT_STATUS = 2 WHERE DEPT_ID = " + DEPT_ID;
        int result = query.doExec(sql);
        query.free();
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }
}
