package org.redot.clover.app.report;

import org.redot.clover.core.CloverManager;
import org.redot.clover.core.ext.BaseAction;
import org.redot.clover.core.ext.Params;
import org.redot.library.db.IQuery;
import org.redot.library.lang.DateUtils;
import org.redot.library.lang.NumberUtils;
import org.redot.library.lang.StringUtils;
import org.restlet.data.Form;
import org.restlet.service.RangeService;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 12-11-16
 * Time: 上午10:41
 * To change this template use File | Settings | File Templates.
 */
public class ReportAction extends BaseAction{

    public Map listPurchase(Form form){
        Map d = form.getValuesMap();
        String DATE_S = StringUtils.toString(d.get("DATE_S"));
        String DATE_E = StringUtils.toString(d.get("DATE_E"));
        String ITEM_TYPE_ID_L = StringUtils.toString(d.get("ITEM_TYPE_ID_L"));
        String ITEM_TYPE_ID_S = StringUtils.toString(d.get("ITEM_TYPE_ID_S"));
        String ITEM_ID = StringUtils.toString(d.get("ITEM_ID"));
        if (DATE_S.length() == 0) {
            DATE_S = DateUtils.getNowDate();
        }
        if (DATE_E.length() == 0) {
            DATE_E = DateUtils.getNowDate();
        }
        if(DATE_S.compareTo(DATE_E) > 0){
            DATE_S = DateUtils.getNowDate();
            DATE_E = DateUtils.getNowDate();
        }
        String COND = " AND SUBSTRING(A.PO_DT, 1, 10)  >= '" + DATE_S.substring(0, 10)+ "' AND SUBSTRING(A.PO_DT, 1, 10) <= '" + DATE_E.substring(0, 10) + "'";

        if(ITEM_ID.length() > 0){
            COND += " AND A.PO_ITEM_ID = " + ITEM_ID;
        }
        else{
           if(ITEM_TYPE_ID_L.length() > 0){
                COND += " AND A.PO_ITEM_ID IN(SELECT ITEM_ID FROM X_ITEM WHERE ITEM_TYPE_ID IN (SELECT ITEM_TYPE_ID FROM X_ITEM_TYPE WHERE ITEM_TYPE_PARENT = "+ ITEM_TYPE_ID_L +"))" ;
           }
           else if(ITEM_TYPE_ID_S.length() > 0){
                COND += " AND A.PO_ITEM_ID IN (SELECT ITEM_ID FROM X_ITEM WHERE ITEM_TYPE_ID = "+ ITEM_TYPE_ID_S +")";
           }
        }
        String sql= "SELECT A.PO_NO,A.PO_DT,A.PO_DT_REQ,A.PO_ITEM_PRICE_REQ,B.ITEM_NAME AS PO_ITEM_NAME,C.UNIT_NAME AS PO_UNIT_NAME,A.PO_ITEM_NUM,A.PO_ITEM_NUM_GIVE," +
                "A.PO_ITEM_PRICE,A.PO_AMOUNT,D.S_NAME AS PO_S_NAME,E.ACCOUNT_NAME AS PO_ACCOUNT_NAME FROM X_PO A " +
                "LEFT JOIN X_ITEM B ON B.ITEM_ID = A.PO_ITEM_ID " +
                "LEFT JOIN X_UNIT C ON C.UNIT_ID = A.PO_ITEM_UNIT_ID " +
                "LEFT JOIN X_S D ON D.S_ID = A.PO_S_ID " +
                "LEFT JOIN X_ACCOUNT E ON E.ACCOUNT_ID = A.PO_MAKER " +
                "WHERE A.PO_STATUS = 4 "+ COND +" ORDER BY A.PO_DT" ;
        System.out.println(sql);
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();

        float AMOUNT =0;
        for(Map PRA:list){
            float PO_AMOUNT = NumberUtils.toFloat(PRA.get("PO_AMOUNT"));
            AMOUNT += PO_AMOUNT;
        }
        Map data = new HashMap();
        data.put("list", list);
        data.put("AMOUNT", AMOUNT);
        query.free();
        return data;
    }

    public List<Map> listCancel(Form form){
        Map data = form.getValuesMap();
        String DATE_S = StringUtils.toString(data.get("DATE_S"));
        String DATE_E = StringUtils.toString(data.get("DATE_E"));
        String ITEM_TYPE_ID_L = StringUtils.toString(data.get("ITEM_TYPE_ID_L"));
        String ITEM_TYPE_ID_S = StringUtils.toString(data.get("ITEM_TYPE_ID_S"));
        String ITEM_ID = StringUtils.toString(data.get("ITEM_ID"));
        if (DATE_S.length() == 0) {
            DATE_S = DateUtils.getNowDate();
        }
        if (DATE_E.length() == 0) {
            DATE_E = DateUtils.getNowDate();
        }
        if(DATE_S.compareTo(DATE_E) > 0){
            DATE_S = DateUtils.getNowDate();
            DATE_E = DateUtils.getNowDate();
        }

        String COND = " SUBSTRING(A.PO_CANCAL_DT, 1, 10)  >= '" + DATE_S.substring(0, 10)+ "' AND SUBSTRING(A.PO_CANCAL_DT, 1, 10) <= '" + DATE_E.substring(0, 10) + "'";

        if(ITEM_ID.length() > 0){
            COND += " AND A.PO_CANCAL_ITEM_ID = " + ITEM_ID;
        }
        else{
            if(ITEM_TYPE_ID_L.length() > 0){
                COND += " AND A.PO_CANCAL_ITEM_ID IN(SELECT ITEM_ID FROM X_ITEM WHERE ITEM_TYPE_ID IN (SELECT ITEM_TYPE_ID FROM X_ITEM_TYPE WHERE ITEM_TYPE_PARENT = "+ ITEM_TYPE_ID_L +"))" ;
            }
            else if(ITEM_TYPE_ID_S.length() > 0){
                COND += " AND A.PO_CANCAL_ITEM_ID IN (SELECT ITEM_ID FROM X_ITEM WHERE ITEM_TYPE_ID = "+ ITEM_TYPE_ID_S +")";
            }
        }
        String sql = "SELECT A.*,B.ITEM_NAME AS PO_ITEM_NAME,C.UNIT_NAME AS PO_UNIT_NAME," +
                "D.ACCOUNT_NAME AS PO_ACCOUNT_NAME,E.S_NAME AS PO_S_NAME FROM X_PO_CANCAL A " +
                "LEFT JOIN X_ITEM B ON B.ITEM_ID = A.PO_CANCAL_ITEM_ID " +
                "LEFT JOIN X_UNIT C ON C.UNIT_ID = B.ITEM_UNIT_ID " +
                "LEFT JOIN X_ACCOUNT D ON D.ACCOUNT_ID = A.PO_CANCAL_MAKER " +
                "LEFT JOIN X_S E ON E.S_ID = A.PO_CANCAL_S_ID WHERE " + COND + " ORDER BY A.PO_CANCAL_DT" ;
        System.out.println(sql);
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();
        query.free();
        return list;
    }


        public List<Map> ItemUseReportFormsList(Form form){
            Map data = form.getValuesMap();
            String ITEM_ID = StringUtils.toString(data.get("ITEM_ID"));
            String DATE_S = StringUtils.toString(data.get("DATE_S"));
            String DATE_E = StringUtils.toString(data.get("DATE_E"));
            String ITEM_TYPE_LARGE = StringUtils.toString(data.get("ITEM_TYPE_ID_L"));
            String ITEM_TYPE_SMALL = StringUtils.toString(data.get("ITEM_TYPE_ID_S"));
            if (DATE_S.length() == 0) {
                DATE_S = DateUtils.getNowDate();
            }
            if (DATE_E.length() == 0) {
                DATE_E = DateUtils.getNowDate();
            }
            if(DATE_S.compareTo(DATE_E) > 0){
                DATE_S =DateUtils.getNowDate();
                DATE_E = DateUtils.getNowDate();

            }
            String DT_LOSS = "  WHERE SUBSTRING(A.ITEM_USE_DT, 1, 10) >= '" + DATE_S.substring(0, 10)+ "' AND SUBSTRING(A.ITEM_USE_DT, 1, 10) <= '" + DATE_E.substring(0, 10) + "'";
            String COND = "";
            if (ITEM_ID.length()>0)
            {
                COND=" AND  A.ITEM_USE_ITEM_ID = "+ITEM_ID;
            }
        else
        {
            if(ITEM_TYPE_SMALL.length()>0)
            {
                COND+=" AND D.ITEM_TYPE_ID IN  " +
                        "(SELECT E.ITEM_TYPE_ID FROM X_ITEM_TYPE E WHERE E.ITEM_TYPE_ID= "+ITEM_TYPE_SMALL+")";
            }
            else
            {
                if(ITEM_TYPE_LARGE.length()>0)
                {
                    COND+=" AND D.ITEM_TYPE_ID IN  " +
                            "(SELECT E.ITEM_TYPE_ID FROM X_ITEM_TYPE E WHERE E.ITEM_TYPE_PARENT= "+ITEM_TYPE_LARGE+")";
                }
            }
        }
            IQuery query=getQuery();
            String sql="SELECT A.ITEM_USE_ID, A.ITEM_USE_ITEM_ID,B.ITEM_NAME AS ITEM_USE_ITEM_NAME,A.ITEM_USE_DT,A.ITEM_USE_ITEM_NUM,C.UNIT_NAME AS ITEM_USE_UNIT_NAME,A.ITEM_USE_ITEM_REASON,A.ITEM_USE_ITEM_MAKER,F.ACCOUNT_NAME AS ITEM_USE_ACCOUNT_NAME FROM X_ITEM_USE A " +
                    "LEFT JOIN X_ITEM B ON A.ITEM_USE_ITEM_ID=B.ITEM_ID " +
                    "LEFT JOIN X_UNIT C ON B.ITEM_UNIT_ID=C.UNIT_ID " +
                    "LEFT JOIN X_ITEM_TYPE D ON B.ITEM_TYPE_ID=D.ITEM_TYPE_ID " +
                    "LEFT JOIN X_ACCOUNT F ON A.ITEM_USE_ITEM_MAKER=F.ACCOUNT_ID"+DT_LOSS+COND;
            List<Map> list=query.doQuery(sql).tables();
            System.out.println(sql);
            query.free();
            return  list;
        }


           public List<Map> ItemLossReportFormsList(Form  form){
            Map data = form.getValuesMap();
                String ITEM_ID = StringUtils.toString(data.get("ITEM_ID"));
                String DATE_S = StringUtils.toString(data.get("DATE_S"));
                String DATE_E = StringUtils.toString(data.get("DATE_E"));
                String ITEM_TYPE_LARGE = StringUtils.toString(data.get("ITEM_TYPE_ID_L"));
                String ITEM_TYPE_SMALL = StringUtils.toString(data.get("ITEM_TYPE_ID_S"));
            if (DATE_S.length() == 0) {
                DATE_S = DateUtils.getNowDate();
            }
            if (DATE_E.length() == 0) {
                DATE_E = DateUtils.getNowDate();
            }
            if(DATE_S.compareTo(DATE_E) > 0){
                DATE_S =DateUtils.getNowDate();
                DATE_E = DateUtils.getNowDate();
            }
            String DT_LOSS = "  WHERE SUBSTRING(A.LOSS_DT, 1, 10) >= '" + DATE_S.substring(0, 10)+ "' AND SUBSTRING(A.LOSS_DT, 1, 10) <= '" + DATE_E.substring(0, 10) + "'";
            String COND = "";
            if (ITEM_ID.length()>0)
            {
                COND =" AND  A.LOSS_ITEM_ID = "+ITEM_ID;
            }
            else
            {
                if(ITEM_TYPE_SMALL.length()>0)
                {
                    COND+=" AND D.ITEM_TYPE_ID IN  " +
                            "(SELECT E.ITEM_TYPE_ID FROM X_ITEM_TYPE E WHERE E.ITEM_TYPE_ID= "+ITEM_TYPE_SMALL+")";
                }
                else
                {
                    if(ITEM_TYPE_LARGE.length()>0)
                    {
                        COND+=" AND D.ITEM_TYPE_ID IN  " +
                                "(SELECT E.ITEM_TYPE_ID FROM X_ITEM_TYPE E WHERE E.ITEM_TYPE_PARENT= "+ITEM_TYPE_LARGE+")";
                    }
                }
            }
            String sql="SELECT A.LOSS_ID, A.LOSS_ITEM_ID,B.ITEM_NAME AS LOSS_ITEM_NAME,A.LOSS_DT,A.LOSS_ITEM_NUM,C.UNIT_NAME AS LOSS_UNIT_NAME,A.LOSS_REASON,A.LOSS_ITEM_MAKER,F.ACCOUNT_NAME AS LOSS_ACCOUNT_NAME FROM X_ITEM_LOSS A " +
                    "LEFT JOIN X_ITEM B ON A.LOSS_ITEM_ID=B.ITEM_ID " +
                    "LEFT JOIN X_UNIT C ON B.ITEM_UNIT_ID=C.UNIT_ID  " +
                    "LEFT JOIN X_ITEM_TYPE D ON B.ITEM_TYPE_ID=D.ITEM_TYPE_ID " +
                    "LEFT JOIN X_ACCOUNT F ON A.LOSS_ITEM_MAKER=F.ACCOUNT_ID"+DT_LOSS+COND;
            IQuery query=getQuery();
            List<Map> list=query.doQuery(sql).tables();
            System.out.println(sql);
            query.free();
            return  list;
        }
}


