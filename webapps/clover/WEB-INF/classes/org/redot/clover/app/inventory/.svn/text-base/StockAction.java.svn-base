package org.redot.clover.app.inventory;

import org.redot.clover.app.message.MessageManager;
import org.redot.clover.app.system.SystemAction;
import org.redot.clover.core.CloverManager;
import org.redot.clover.core.ext.BaseAction;
import org.redot.clover.core.ext.Params;
import org.redot.library.db.IQuery;
import org.redot.library.db.ITable;
import org.redot.library.lang.DateUtils;
import org.redot.library.lang.NumberUtils;
import org.redot.library.lang.StringUtils;
import org.restlet.data.Form;

import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 11-4-30
 * Time: 下午4:44
 * To change this template use File | Settings | File Templates.
 */
public class StockAction extends BaseAction{
    public  List<Map>  list(Params params){
        String ITEM_ID = StringUtils.toString(params.val("STOCK_ITEM_ID"));
        String DATE_S = StringUtils.toString(params.val("DATE_S"));
        String DATE_E = StringUtils.toString(params.val("DATE_E"));
        if (DATE_S.length() == 0) {
            DATE_S = DateUtils.formatDate(DateUtils.getFirstDateOfMonth(new Date()));
        }
        if (DATE_E.length() == 0) {
            DATE_E = DateUtils.getNowDate();
        }
        if(DATE_S.compareTo(DATE_E) > 0){
            DATE_S = DateUtils.formatDate(DateUtils.getFirstDateOfMonth(new Date()));
            DATE_E = DateUtils.getNowDate();
        }
        String COND = "";
        if(ITEM_ID.length() > 0){
            COND += " WHERE  A.STOCK_ITEM_ID = " + ITEM_ID;
        }
        String sql = "SELECT A.STOCK_ITEM_ID,C.ITEM_NAME AS STOCK_ITEM_NAME ,B.UNIT_ID AS STOCK_UNIT_ID,B.UNIT_NAME AS STOCK_UNIT_NAME," +
                " CONVERT(SUM_PURCHASE(A.STOCK_ITEM_ID,'"+DATE_S+" 00:00:00'"+",'"+DATE_E+" 23:59:59'"+"),DECIMAL(10,2)) AS STOCK_SUM_PURCHASE," +
                " CONVERT(SUM_SALE(A.STOCK_ITEM_ID,'"+DATE_S+" 00:00:00'"+",'"+DATE_E+" 23:59:59'"+"),DECIMAL(10,2)) AS STOCK_SUM_SALE," +
                " CONVERT(SUM_LOSS(A.STOCK_ITEM_ID,'"+DATE_S+" 00:00:00'"+",'"+DATE_E+" 23:59:59'"+"),DECIMAL(10,2)) AS STOCK_SUM_LOSS," +
                " CONVERT(SUM_USE(A.STOCK_ITEM_ID,'"+DATE_S+" 00:00:00'"+",'"+DATE_E+" 23:59:59'"+"),DECIMAL(10,2)) AS STOCK_SUM_USE," +
                " CONVERT(SUM_CANCAL(A.STOCK_ITEM_ID,'"+DATE_S+" 00:00:00'"+",'"+DATE_E+" 23:59:59'"+"),DECIMAL(10,2)) AS STOCK_SUM_CANCAL " +
                "  FROM X_STOCK A  " +
                "  LEFT JOIN X_ITEM C ON A.STOCK_ITEM_ID=C.ITEM_ID " +
                "  LEFT JOIN X_UNIT B ON C.ITEM_UNIT_ID=B.UNIT_ID "+COND;
        IQuery query = getQuery();
        List<Map> list = query.doQuery(sql).tables();
        System.out.println(sql);
        for(Map data : list){
            System.out.println(sql);
            String STOCK_ITEM_ID=StringUtils.toString(data.get("STOCK_ITEM_ID"));
            String STOCK_ITEM_NAME=StringUtils.toString(data.get("STOCK_ITEM_NAME"));
            String STOCK_UNIT_NAME=StringUtils.toString(data.get("STOCK_UNIT_NAME"));
            float STOCK_SUM_PURCHASE=NumberUtils.toFloat(data.get("STOCK_SUM_PURCHASE"));
            float STOCK_SUM_SALE=NumberUtils.toFloat(data.get("STOCK_SUM_SALE"));
            float STOCK_SUM_LOSS=NumberUtils.toFloat(data.get("STOCK_SUM_LOSS"));
            float STOCK_SUM_USE=NumberUtils.toFloat(data.get("STOCK_SUM_USE"));
            float STOCK_SUM_CANCAL=NumberUtils.toFloat(data.get("STOCK_SUM_CANCAL"));
            System.out.println("aaaaaaaaaa"+STOCK_ITEM_ID);
            sql="SELECT REALITY_SUM_STOCK("+STOCK_ITEM_ID+")";
            float  REALITY_SUM_STOCK=NumberUtils.toFloat(query.doQuery(sql).getValue());
            System.out.println("id"+STOCK_ITEM_ID);
            System.out.println("名字"+STOCK_ITEM_NAME);
            System.out.println("单位名称"+STOCK_UNIT_NAME);
            System.out.println("累积采购"+STOCK_SUM_PURCHASE);
            System.out.println("累积销售"+STOCK_SUM_SALE);
            System.out.println("累积损耗"+STOCK_SUM_LOSS);
            System.out.println("累积领料"+STOCK_SUM_USE);
            System.out.println("累积退货"+STOCK_SUM_CANCAL);
            float THEORY_SUM_STOCK = STOCK_SUM_PURCHASE -STOCK_SUM_SALE - STOCK_SUM_LOSS - STOCK_SUM_USE-STOCK_SUM_CANCAL;
            System.out.println("理论库存"+THEORY_SUM_STOCK);
            System.out.println("实际库存"+REALITY_SUM_STOCK);
            data.put("THEORY_SUM_STOCK", NumberUtils.toDecimal(THEORY_SUM_STOCK, 2));
            data.put("REALITY_SUM_STOCK", NumberUtils.toDecimal(REALITY_SUM_STOCK, 2));
        }
        System.out.println(list);
        query.free();
        return list;
    }
    public static int in(String PO_ID){
        return new StockAction().update(PO_ID, true);
    }
    public static int cancel(String PO_ID){
        return new StockAction().update(PO_ID, false);
    }


    public int update(String PO_ID, boolean isIN){
        IQuery query = getQuery();
        String sql = "SELECT PO_ITEM_ID, PO_ITEM_NUM, PO_ITEM_NUM_GIVE,PO_AMOUNT FROM X_PO WHERE PO_ID = "+ PO_ID;
        List<Map> list = query.doQuery(sql).tables();
        int result = 0;
        for(Map data:list){
            String ITEM_ID = StringUtils.toString(data.get("PO_ITEM_ID"));
            float ITEM_NUM = NumberUtils.toFloat(data.get("PO_ITEM_NUM")) + NumberUtils.toFloat(data.get("PO_ITEM_NUM_GIVE"));
            float ITEM_AMOUNT = NumberUtils.toFloat(data.get("PO_AMOUNT"));

            sql = "SELECT STOCK_NUM_IN,STOCK_PRICE FROM X_STOCK WHERE STOCK_ITEM_ID = " + ITEM_ID;
            System.out.println(sql);
            String[] ARR = query.doQuery(sql).get();
            Map map = new HashMap();
            ITable T = getTable("X_STOCK").clearData();

            if(ARR.length == 0){
                if(!isIN){
                    query.free();
                    return CloverManager.CODE_SUCCESS;
                }
                map.put("STOCK_ITEM_ID", ITEM_ID);
                map.put("STOCK_NUM_IN", ITEM_NUM);
                map.put("STOCK_PRICE", NumberUtils.toDecimal(ITEM_AMOUNT/ITEM_NUM, 2));
                result = T.data(map).create();
            }
            else{
                if(isIN){
                    float STOCK_NUM_IN =  NumberUtils.toFloat(ARR[0]) + ITEM_NUM;
                    float STOCK_AMOUNT = NumberUtils.toFloat(ARR[1]) * NumberUtils.toFloat(ARR[0]) + ITEM_AMOUNT;
                    map.put("STOCK_NUM_IN", STOCK_NUM_IN);
                    map.put("STOCK_PRICE", NumberUtils.toDecimal(STOCK_AMOUNT/STOCK_NUM_IN, 2));
                }
                else{
                    map.put("STOCK_NUM_OUT", ITEM_NUM);
                }
                result = T.data(map).where(T.column("STOCK_ITEM_ID").eq(ITEM_ID)).update();
            }
        }
        query.free();
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        return CloverManager.CODE_SUCCESS;
    }

    public int fix(Form form){
        if(!isLogin()){
            return CloverManager.CODE_FAILED;
        }
        String  ACCOUNT_ID= StringUtils.toString(getClient().getCookies().get("ACCOUNT_ID"));
        Map data = form.getValuesMap();
        String SF_ITEM_ID = StringUtils.toString(data.get("SF_ITEM_ID"));
        String SF_NUM = StringUtils.toString(data.get("SF_NUM"));
        if(SF_ITEM_ID.length() == 0 || SF_NUM.length() == 0){
            return CloverManager.CODE_FAILED;
        }
        ITable T = getTable("X_SF").clearData();
        int result = 0;
        String SF_ID = String.valueOf(T.getMaxID("SF_ID"));
        data.put("SF_ID", SF_ID);
        data.put("SF_DT", DateUtils.getNow());
        data.put("SF_MAKER", ACCOUNT_ID);
        result = T.data(data).create();
        if(result < 0){
            return CloverManager.CODE_FAILED;
        }
        IQuery query = getQuery();
        String sql = "UPDATE X_STOCK SET STOCK_NUM_IN = 0, STOCK_NUM_OUT = 0  WHERE STOCK_ITEM_ID = " + SF_ITEM_ID;
        query.doExec(sql);
        query.free();
        return CloverManager.CODE_SUCCESS;
    }
}
