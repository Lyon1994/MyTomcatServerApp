package org.redot.library.codec;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.HashMap;
import java.util.Map;


public class AESEncrypter {


    private static String rawKey = "b2100237f8b0a66e2083ec8767bdef97";
    private static String ALGORITHM = "AES";

    private static String asHex(byte buf[]) {
        StringBuffer strbuf = new StringBuffer(buf.length * 2);
        int i;

        for (i = 0; i < buf.length; i++) {
            if (((int) buf[i] & 0xff) < 0x10)
                strbuf.append("0");
            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));
        }

        return strbuf.toString();
    }

    private static byte[] asBin(String src) {
        if (src.length() < 1)
            return null;
        byte[] encrypted = new byte[src.length() / 2];
        for (int i = 0; i < src.length() / 2; i++) {
            int high = Integer.parseInt(src.substring(i * 2, i * 2 + 1), 16);
            int low = Integer.parseInt(src.substring(i * 2 + 1, i * 2 + 2), 16);
            encrypted[i] = (byte) (high * 16 + low);
        }
        return encrypted;
    }


    /**
     * 输入明文进行加密，返回加密串
     *
     * @param message
     * @return
     */
    public static String getEncrypt(String message) {
        byte[] key = asBin(rawKey);
        // Instantiate the cipher
        try {
            SecretKeySpec skeySpec = new SecretKeySpec(key, ALGORITHM);

            Cipher cipher = Cipher.getInstance(ALGORITHM);

            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);

            byte[] encrypted = cipher.doFinal(message.getBytes());

            return asHex(encrypted);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return "";
        }
    }

    /**
     * 输入加密串进行解密，返回明文
     *
     * @param encrypted
     * @return
     */
    public static String getDecrypt(String encrypted) {
        byte[] tmp = asBin(encrypted);
        byte[] key = asBin(rawKey);

        try {
            SecretKeySpec skeySpec = new SecretKeySpec(key, ALGORITHM);

            Cipher cipher = Cipher.getInstance(ALGORITHM);

            cipher.init(Cipher.DECRYPT_MODE, skeySpec);

            byte[] decrypted = cipher.doFinal(tmp);

            return new String(decrypted);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return "";
        }
    }


    public static void main(String[] args) {
        String inf = "a,b;d,e;";
       String a[]=inf.split(";");
        for (int x=0;x<a.length;x++){
            String z[]=a[x].split(",");
            System.out.print(z[1]);
        }

    }


}
