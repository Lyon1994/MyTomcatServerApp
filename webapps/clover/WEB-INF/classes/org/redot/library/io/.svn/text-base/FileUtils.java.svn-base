package org.redot.library.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.channels.FileChannel;
import java.nio.ByteBuffer;
import java.util.Set;
import java.util.HashSet;

/**
 * Copyright By Redot.
 * User: CASH
 * Date: 2009-10-10
 * Time: 14:33:06
 */
public class FileUtils {

    public static File toFile(String path){
        File file = new File(path);
        return file;
    }

    public static boolean isExist(File file){
        return file.exists();
    }

    public static boolean isExist(String path){
        return isExist(toFile(path));
    }

    public static boolean isDir(File file){
        return file.exists() && file.isDirectory();
    }

    public static boolean isDir(String path){
        return isDir(toFile(path));
    }

    public static boolean isFile(File file){
        return file.exists() && file.isFile();
    }

    public static boolean isFile(String path){
        return isFile(toFile(path));
    }

    public static boolean mkdir(File file){
        try{
            return file.mkdirs();
        }
        catch(Exception e){
            return false;
        }
    }

    public static boolean mkdir(String path){
        return mkdir(toFile(path));
    }

    public static boolean createFile(File file){
        try{
            return file.createNewFile();
        }
        catch(Exception e){
            return false;
        }
    }

    public static boolean createFile(String path){
        return createFile(toFile(path));
    }

    public static boolean copy(File src, File target){
        if(isFile(src)){
                return copyFile(src, target);
        }
        if(isDir(src) && !isFile(target)){
            return copyFilePath(src, target);
        }
        return false;
    }

    public static boolean copy(String src, String target){
        return copy(toFile(src), toFile(target));
    }

    protected static boolean copyFile(File src, File target){
        try {
            //System.out.println("src="+src.getPath() + "|" + src.getName());
            //System.out.println("target="+target.getPath() + "|" + target.getName());
            if(isDir(target)){
                target = new File(target.getPath() + "/" + src.getName());
            }
            //System.out.println("target="+target.getPath() + "|" + target.getName());
            FileChannel in = new FileInputStream(src).getChannel();
            FileChannel out = new FileOutputStream(target).getChannel();
            ByteBuffer bb = ByteBuffer.allocate(1024);
            while(in.read(bb) != -1){
                bb.flip();
                out.write(bb);
                bb.clear();
            }
            return true;
        }
        catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            return false;
        }
    }

    protected static boolean copyFile(String src, String target){
        return copyFile(toFile(src), toFile(target));
    }

    protected static boolean copyFilePath(File src, File target){
        if(!isExist(target) && !mkdir(target)){
            return false;
        }
        String[] list = src.list();
        String srcPath = src.getPath();
        String targetPath = target.getPath();
        for(String fileName : list){
            if(!copy(src + "/" + fileName, targetPath + "/" + fileName)){
                return false;
            }
        }
        return true;
    }

    public static boolean delete(File file){
        if(!isExist(file)){
            return false;
        }
        if(isFile(file)){
            return file.delete();
        }
        String[] list = file.list();
        String filePath = file.getPath();
        for(String fileName : list){
            if(!delete(filePath + "/" + fileName)){
                return false;
            }
        }
        return file.delete();
    }

    public static boolean delete(String file){
        return delete(toFile(file));
    }

    public static boolean move(File src, File target){
        if(src.getPath().equals(target.getPath())){
            return true;
        }
        if(copy(src, target)){
            return delete(src);
        }
        return false;
    }

    public static boolean move(String src , String target){
        return move(toFile(src), toFile(target));
    }

    public static File[] getFiles(String src, String...exts){
        return getFiles(toFile(src), exts);
    }

    public static File[] getFiles(File src, String...exts){
        File[] files = src.listFiles();
        if(exts == null || exts.length == 0){
            return files;
        }
        Set<File> set = new HashSet<File>();
        for(File file : files){
            for(String ext : exts){
                if(ext == null){
                    continue;
                }
                if(getExt(file).equals(ext)){
                    set.add(file);
                }
            }
        }
        return set.toArray(new File[0]);
    }

    public static File[] getDirs(String src){
        return getDirs(toFile(src));
    }

    public static File[] getDirs(File src){
        File[] files = src.listFiles();
        if(files == null){
            return null;
        }
        Set<File> set = new HashSet<File>();
        for(File file : files){
            if(file.isDirectory()){
                set.add(file);
            }
        }
        return set.toArray(new File[0]);
    }

    public static String getName(File file){
        return file.getName();
    }

    public static String getName(String path){
        return getName(toFile(path));
    }

    public static String getPath(File file){
        if(isFile(file)){
            String filePath = file.getPath();
            int pos = filePath.lastIndexOf(47);// "/"
            if(pos == -1){
                pos = filePath.lastIndexOf(92);// "\"
            }
            if(pos != -1){
                return filePath.substring(pos + 1);
            }
        }
        return file.getPath();
    }

    public static String getPath(String path){
        return getPath(toFile(path));
    }

    public static String getExt(File file){
        if(isFile(file)){
            String fileName = getName(file);
            int pos = fileName.lastIndexOf(".");
            if(pos != -1){
                return fileName.substring(pos + 1);
            }
        }
        return "";
    }

    public static String getExt(String path){
        return getExt(toFile(path));
    }

    public static long getSize(File file){
        if(isFile(file)){
            return file.length();
        }
        if(isDir(file)){
            long len = 0L;
            String[] list = file.list();
            String filePath = file.getPath();
            for(String fileName : list){
                len += getSize(filePath + "/" + fileName);
            }
            return len;
        }
        return 0L;
    }

    public static long getSize(String path){
        return getSize(toFile(path));
    }

    public static String getSizeStr(File file){
        long len = getSize(file);
        if(len == 0L){
            return "0K";
        }
        long k = len/1024;

        if(k < 1024){
            return k + "K";
        }
        long m = k/1024;
        if(m < 1024){
            return m + "M" + (k%1024) + "K";
        }
        long g = m/1024;
        
        return g + "G" + (m%1024) + "M";


    }

    public static String getSizeStr(String path){
        return getSizeStr(toFile(path));
    }
}
