package org.redot.library.script;

import org.redot.library.db.IDataBase;
import org.redot.library.db.IDataBaseFactory;
import org.redot.library.db.IDataBaseType;

import javax.script.*;
import java.util.List;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.IOException;

/**
 * Copyright By Redot.
 * User: CASH
 * Date: 2009-10-17
 * Time: 15:26:16
 */
public class TestScript {

    public TestScript() {
        /*ScriptEngineManager manager = new ScriptEngineManager();


        List<ScriptEngineFactory> factories = manager.getEngineFactories();


        for (ScriptEngineFactory factory : factories) {


            System.out.printf("Name: %s%n" +
                "Version: %s%n" +
                "Language name: %s%n" +
                "Language version: %s%n" +
                "Extensions: %s%n" +
                "Mime types: %s%n" +
                "Names: %s%n",
                factory.getEngineName(),
                factory.getEngineVersion(),
                factory.getLanguageName(),
                factory.getLanguageVersion(),
                factory.getExtensions(),
                factory.getMimeTypes(),
                factory.getNames());


            ScriptEngine engine = factory.getScriptEngine();
        }*/

        test2();
    }

    public void test1() {
        ScriptEngineManager manager = new ScriptEngineManager();

        ScriptEngine engine = manager.getEngineByName("javascript");
        try {

            Double hour = (Double) engine.eval("var date = new Date();println('asas');" + "date.getHours();");
            String msg = "";

            if (hour < 10) {

            } else if (hour < 16) {

            } else if (hour < 20) {

            } else {

            }
            System.out.printf("Сʱ%s: %s%n", hour, msg);
        }
        catch (ScriptException e) {
            System.err.println(e);
        }
    }

    public void test2(){
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("javascript");
        try {
            Compilable compEngine = (Compilable) engine;
            IDataBase db = IDataBaseFactory.getInstance().add(
            "test",
            IDataBaseType.MYSQL,
            "jdbc:mysql://localhost:3306/redot?useUnicode=true&characterEncoding=utf8",
            "root",
            "111");
            //engine.put("db", db);
            FileReader reader = new FileReader("/Users/CASH/DEV/IDEA-DEV/Redot/LiveLibrary/src/org/redot/library/library/script/test.js");
            CompiledScript script = compEngine.compile(reader);
            script.eval();
            //engine.eval("importPackage(org.redot.library.db);println(db.createQuery().doQuery('select * from test',[]));");
            //engine.eval("importPackage(javax.swing);JOptionPane.showMessageDialog(null, 'Hello!);");
        } catch (ScriptException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (FileNotFoundException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

    }

    public static void main(String[] args) {
        //new TestScript();
        
        ScriptCache scriptCache = new ScriptCache(10, false){
            @Override
            public File getScriptFile(String key) {
                return new File("/Users/CASH/DEV/IDEA-DEV/Redot/LiveLibrary/src/org/redot/library/library/script/" + key);
            }
        };
        IDataBase db = IDataBaseFactory.getInstance().add(
            "test",
            IDataBaseType.MYSQL,
            "jdbc:mysql://localhost:3306/redot?useUnicode=true&characterEncoding=utf8",
            "root",
            "111");
        try {
            long a = System.currentTimeMillis();
            scriptCache.init("test.js", "test1.js");

            scriptCache.precompiled();
            //scriptCache.getContext().setAttribute("ee", "ooooo", ScriptContext.ENGINE_SCOPE);
            //scriptCache.invoke("main");

            scriptCache.invoke("main");

            for(int i=0;i<1;i++){
                scriptCache.invoke("xx", i+1);
            }
            long b = System.currentTimeMillis();
            System.out.println(b-a + "ms");
            ScriptContext context = scriptCache.getEngine().getContext();
            List<Integer> list = context.getScopes();
            System.out.println("ScriptContext.ENGINE_SCOPE = " + ScriptContext.ENGINE_SCOPE);
            System.out.println("ScriptContext.GLOBAL_SCOPE = " + ScriptContext.GLOBAL_SCOPE);
            for(int i : list){
                System.out.println("i = " + i);
                Bindings bs = context.getBindings(i);

                for (String s : bs.keySet()) {
                    System.out.println("bs=" + s);
                    System.out.println("bs_obj = " + bs.get(s).getClass().getName());
                }
            }
            
        } catch (ScriptException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (NoSuchMethodException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }
}
